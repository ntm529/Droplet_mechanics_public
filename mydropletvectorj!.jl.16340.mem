   238972 module MyDropletVectorJ!
        - include("mydropletvectorjcomponents.jl")
        - using .MyDropletVectorJComponents
        - using LinearAlgebra
        - using DifferentialEquations
        - export dropvecj!
        - 
        - function dropvecj!(m, k, L , γ, D, timeend, ICmatrix, boolean_osm)
        - 
        0 ICvector = reshape(ICmatrix, :, 1);
        - # Define some of the model parameters 
        0 dimensions = (size(ICmatrix,2)-2)/2;
        0 dimensions = Int(dimensions);
        0 dropletcount = Int(size(ICmatrix,1));
        0 tspan = (0.0, timeend);
        - # initialize the two logical matrixes
      240 ϕ =  .~I(dropletcount);
        0 ϕ = repeat(ϕ, 1, dimensions);
        - 
       96 ζ = I(dropletcount-1);
        0 ζ = repeat(ζ,dimensions,1);
        0 ζ = reshape(ζ,(dropletcount-1),:) ;
        0 ζ = ζ';
        0 ζ = repeat(ζ,dropletcount,1);
        0 ζ = reshape(ζ,dimensions*(dropletcount-1),:);
        - 
        - 
        - 
        - # initialize certain empty matrixes
        - # The 3 value is the number of dimensions, x, y, z 
        - 
      368 distance_combinations = zeros(dropletcount*3, dropletcount-1)
        - 
      368 direction = zeros(size(distance_combinations))
        - 
        - 
        - 
      176 sphere_intersection = zeros(dropletcount, dropletcount-1)
      176 sphere_dist_component_1 = zeros(dropletcount, dropletcount-1)
      176 sphere_dist_component_2 = zeros(dropletcount, dropletcount-1)
        - 
        - 
        - 
      176 circular_area = zeros(dropletcount, dropletcount-1)
      176 comosm = zeros(dropletcount, dropletcount-1)
      176 J = zeros(dropletcount, dropletcount-1) 
      112 volume = zeros(dropletcount,1)
      112 moles = zeros(dropletcount,1)
      112 dradii = zeros(dropletcount,1)
      112 dosmolarities = zeros(dropletcount,1)
        - 
        - 
        - 
        - 
      368 norm_combinations = zeros(dropletcount*3,dropletcount-1)
      176 comradii = zeros(dropletcount, dropletcount-1); 
      176 radii_combinations = zeros(dropletcount, dropletcount-1)
      368 bilayer_spring_distance = zeros(dropletcount*3, dropletcount-1); 
      368 logic_spring = zeros(dropletcount*3, dropletcount-1)
        - 
        - 
        - 
        - 
        - 
        - # Create the current residual that makes the osmolarity activate after the droplets settle
        - 
        - 
      432 p = [ϕ, ζ, sphere_intersection , distance_combinations, norm_combinations, direction,   m, k, L, γ, dropletcount, dimensions, D, boolean_osm, comradii, bilayer_spring_distance, circular_area, radii_combinations, comosm, J, logic_spring, volume, moles, dradii, dosmolarities, sphere_dist_component_1, sphere_dist_component_2] 
        0 prob = ODEProblem(mydropfun!, ICvector, tspan, p)
      736 sol = solve(prob, Tsit5(), reltol=1e-8, saveat = 0.1)
        - 
        0 W = myOvitoPrint!(sol, dropletcount, dimensions)
        - outfile = "E:/Research Scripts and Functions/OVITO_Files/visual_model.ovito"
     1152 f = open(outfile, "w")
   271952 for i in eachindex(W)   
   432400     println(f, W[i])
        - end
        0 close(f)
        - 
        - end
        - 
        - 
        - # END module
        - end
